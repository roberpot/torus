/*
 * This file is part of Torus.
 * Torus is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * Torus is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with Torus. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * Based on spherescripts from the sphereserver project.
 * https://github.com/Sphereserver/Scripts
 */

[DEFNAME HARDCODED]
default_item = i_gold;  // If we cannot create the item, make it this.
default_char = c_man;   // If we cannot create the char, make it this.
default_seed = i_gold;  // When we make a seed, make it look like this.
default_msg  = i_gold;  // When we make a bulletin board post, use this item.
guards  = {c_guard 1 c_guard_f 1};
deffood = {i_fruit_grapes 1 i_ham 1 i_cheese_cut 1 i_muffin 1 i_fish_cut_cooked 1 i_ribs_cooked 1 i_bird_cooked 1 i_sausages 1 i_fruit_apple 1 i_fruit_peach 1};

[DEFNAME mount_items]
// This contain the list of the mount/mountid the format is:
// mount_0x<dispid hex> <mount itemid hex>
// ---------------------------------------------------------
// PreT2A
mount_0xc8 = 03e9f;  // horse 1
mount_0xe2 = 03ea0;  // horse 2
mount_0xe4 = 03ea1;  // horse 3
mount_0xcc = 03ea2;  // horse 4
// T2A
mount_0xd2 = 03ea3;  // desert ostard
mount_0xda = 03ea4;  // frenzied ostard
mount_0xdb = 03ea5;  // forest ostard
mount_0xdc = 03ea6;  // llama
// LBR
mount_0xa9 = 03e95;  // fire beetle
mount_0xc3 = 03e97;  // ethereal beetle
mount_0xc2 = 03e98;  // ethereal swamp dragon
mount_0xc1 = 03e9a;  // ethereal ridgeback
mount_0xc0 = 03e9b;  // ethereal unicorn
mount_0xbf = 03e9c;  // ethereal kirin
mount_0xbe = 03e9e;  // fire steed
mount_0x74 = 03ea7;  // nightmare
mount_0x75 = 03ea8;  // silver steed
mount_0xb2 = 03ea9;  // unknown mare
mount_0x73 = 03eaa;  // ethereal horse
mount_0xaa = 03eab;  // ethereal llama
mount_0xab = 03eac;  // ethereal ostard
mount_0x84 = 03ead;  // kirin
mount_0x78 = 03eaf;  // minax warhorse
mount_0x79 = 03eb0;  // shadowlord warhorse
mount_0x77 = 03eb1;  // magecounsil warhorse
mount_0x76 = 03eb2;  // britannian warhorse
mount_0x90 = 03eb3;  // seahorse
mount_0x7a = 03eb4;  // unicorn
mount_0xb1 = 03eb5;  // dread warhorse
mount_0x72 = 03eb6;  // dark steed
mount_0xb3 = 03eb7;  // unknown mare 2
mount_0xbb = 03eb8;  // ridgeback
mount_0xbc = 03eba;  // savage ridgeback
mount_0x319 = 03ebb;  // skeletal mount
mount_0x317 = 03ebc;  // beetle
mount_0x31a = 03ebd;  // swamp dragon
mount_0x31f = 03ebe;  // armored swamp dragon
// AOS
// SE
mount_0xf3 = 03e94;  // hiryu
// ML

mount_0x11c = 03e92;  // armored steed (Mondains Steed, Charger of the Fallen)
mount_0x115 = 03e91;  // cu sidhe
mount_0x114 = 03e90;  // reptalon
mount_0xd5 = 03ec5;   // polar bear (veteran's award)
// SA
mount_0x1b0 = 03ec6;  // armored boura
mount_0x4e6 = 03ec7;  // tiger
mount_0x4e7 = 03ec8;  // tigress

[DEFNAME hues]
color_text          = -1;
color_none          = 0;
color_red1          = 32;
color_red2          = 33;
color_cyan          = 88;
color_gray_dk       = 802;
color_energy_vortex = 118;
color_gray_lt       = 904;
color_dye_high      = 1000;  // highest dyeable color = 1001
color_ice           = 1152;
color_snow          = 1153;
color_rock          = 1154;
color_spectral      = 16385;

[DEFNAME hues_range]
colors_all     = {2 1001};
colors_skin    = {1002 1058};
colors_hair    = {1102 1149};
colors_pink    = {1201 1254};
colors_blue    = {1301 1354};
colors_green   = {1401 1454};
colors_orange  = {1501 1554};
colors_red     = {1601 1654};
colors_yellow  = {1701 1754};
colors_neutral = {1801 1908};
colors_snake   = {2001 2018};
colors_bird    = {2101 2130};
colors_slime   = {2201 2224};
colors_animal  = {2301 2318};
colors_metal   = {2401 2430};

colors_bright        = {062 1 071 1 03 9 0d 9 013 9 01c 9 021 9 030 9 037 9 03a 9 044 9 059 9};
colors_stone         = {2498 1 2500 1 {2671 2706} 1};
colors_skin_gargoyle = {1755 1779};
colors_white         = 2301;
colors_black         = 2305;
colors_brown         = {1110 1116};
colors_gray          = {946 947};
colors_demon         = {1106 1110};
colors_wyrm          = {0 1 {1105 1110} 1 {34 39} 1};
colors_red_drag      = {color_red1 1 color_red2 1};
colors_blood         = {33 38};
colors_lava          = {{32 34} 1 {53 55} 1 {43 45} 1};
colors_poison        = {61 79};

color_magic_weap   = 0;
color_magic_shield = 0;
color_magic_arm    = 0;

color_magic_defense         = 1650;
color_magic_guarding        = 1430;
color_magic_hardening       = 1353;
color_magic_fortification   = 1805;
color_magic_invulnerability = 1887;

color_o_spined = 08ac;
color_o_horned = 0845;
color_o_barbed = 0851;

[DEFNAME brains]
brain_none            = 0;
brain_animal          = 1;
brain_human           = 2;
brain_healer          = 3;
brain_guard           = 4;
brain_banker          = 5;
brain_vendor          = 6;
brain_animal_trainer  = 7;
brain_monster         = 8;
brain_berserk         = 9;
brain_dragon          = 10;

[DEFNAME sounds]
snd_wind1       = 21;
snd_wind2       = 22;
snd_crickets    = 23;
snd_craft_anvil = 42;

snd_animals_aligatr1     = 90;
snd_animals_aligatr2     = 91;
snd_animals_aligatr3     = 92;
snd_animals_aligatr4     = 93;
snd_animals_aligatr5     = 94;
snd_animals_bear1        = 95;
snd_animals_bull1        = 100;
snd_animals_cat1         = 105;
snd_animals_chicken1     = 110;
snd_animals_cougar1      = 115;
snd_animals_cow1         = 120;
snd_animals_crow1        = 125;
snd_animals_deer3        = 130;
snd_animals_deer4        = 131;
snd_animals_deer5        = 132;
snd_animals_dog1         = 133;
snd_animals_dolphin1     = 138;
snd_animals_eagle1       = 143;
snd_animals_frstbrd1     = 148;
snd_animals_goat1        = 153;
snd_animals_gorilla1     = 158;
snd_animals_grizzly1     = 163;
snd_animals_horse1       = 168;
snd_animals_jungbrd1     = 173;
snd_animals_lion1        = 178;
snd_animals_llama3       = 183;
snd_animals_llama4       = 184;
snd_animals_llama5       = 185;
snd_animals_panther1     = 186;
snd_animals_parrot1      = 191;
snd_animals_pig1         = 196;
snd_animals_pig2         = 197;
snd_animals_rabbit3      = 201;
snd_animals_rabbit4      = 202;
snd_animals_rabbit5      = 203;
snd_animals_rat1         = 204;
snd_animals_raven1       = 209;
snd_animals_sheep1       = 214;
snd_animals_snake1       = 219;
snd_animals_walrus1      = 224;
snd_animals_wolf1        = 229;
snd_special_spelleffect1 = 254;
snd_elementl_airelem1    = 263;
snd_elementl_airelem2    = 264;
snd_elementl_airelem3    = 265;
snd_elementl_airelem4    = 266;
snd_elementl_airelem5    = 267;
snd_elementl_erthel1     = 268;
snd_elementl_firelem1    = 273;
snd_elementl_watrel1     = 278;

snd_hits_hit01 = 309;
snd_hits_hit02 = 310;
snd_hits_hit03 = 311;
snd_hits_hit04 = 312;
snd_hits_hit05 = 313;
snd_hits_hit06 = 314;
snd_hits_hit07 = 315;
snd_hits_hit08 = 316;
snd_hits_hit09 = 317;
snd_hits_hit10 = 318;
snd_hits_hit11 = 319;
snd_hits_hit12 = 320;
snd_hits_hit13 = 321;
snd_hits_hit14 = 322;
snd_hits_hit15 = 323;
snd_hits_hit16 = 324;
snd_hits_hit17 = 325;
snd_hits_hit18 = 326;
snd_hits_hit19 = 327;
snd_hits_hit20 = 328;
snd_hits_hit21 = 329;
snd_hits_hit22 = 330;

snd_human_foomph01            = 331;
snd_human_foomph06            = 332;
snd_human_foomph07            = 333;
snd_human_foomph08            = 334;
snd_human_foomph09            = 335;
snd_human_f_die_01            = 336;
snd_human_f_die_02            = 337;
snd_human_f_die_03            = 338;
snd_human_f_die_04            = 339;
snd_human_moomph01            = 340;
snd_human_moomph02            = 341;
snd_human_moomph03            = 342;
snd_human_moomph04            = 343;
snd_human_moomph05            = 344;
snd_human_moomph13            = 345;
snd_human_m_die_01            = 346;
snd_human_m_die_02            = 347;
snd_human_m_die_03            = 348;
snd_human_m_die_04            = 349;
snd_monster_corpsr1           = 353;
snd_monster_corpsr3           = 354;
snd_monster_corpsr4           = 355;
snd_monster_corpsr5           = 356;
snd_monster_daemon1           = 357;
snd_monster_dragon1           = 362;
snd_monster_ettin1            = 367;
snd_monster_gargyl1           = 372;
snd_monster_gazer1            = 377;
snd_monster_ghost1            = 382;
snd_monster_gispidr1          = 387;
snd_monster_grat1             = 392;
snd_monster_gscorp1           = 397;
snd_monster_harpy1            = 402;
snd_monster_headls1           = 407;
snd_monster_lich1             = 412;
snd_monster_lzrdmn1           = 417;
snd_monster_mngbat1           = 422;
snd_monster_ogre1             = 427;
snd_monster_orc1              = 432;
snd_monster_ratman1           = 437;
snd_monster_reaper1           = 442;
snd_monster_seaserp1          = 447;
snd_monster_seaserp3          = 448;
snd_monster_seaserp4          = 449;
snd_monster_seaserp5          = 450;
snd_monster_skletn1           = 451;
snd_monster_slime1            = 456;
snd_monster_troll1            = 461;
snd_monster_wisp1             = 466;
snd_monster_zombie1           = 471;
snd_weapons_axe01             = 562;
snd_weapons_blunt01           = 563;
snd_weapons_crossbow          = 564;
snd_weapons_gilotin1          = 565;
snd_weapons_hvyswrd1          = 566;
snd_weapons_hvyswrd4          = 567;
snd_weapons_swish01           = 568;
snd_weapons_swish02           = 569;
snd_weapons_swish03           = 570;
snd_weapons_sword1            = 571;
snd_weapons_sword7            = 572;
snd_z_end_carpntry            = 573;
snd_z_end_dye                 = 574;
snd_z_end_fshsplsh            = 575;
snd_z_end_liquid              = 576;
snd_z_end_lockpick            = 577;
snd_z_end_mortar              = 578;
snd_z_end_mystery1            = 579;
snd_z_end_mystery2            = 580;
snd_z_end_mystery3            = 581;
snd_z_end_poison              = 582;
snd_z_end_powder              = 583;
snd_z_end_scissors            = 584;
snd_z_end_scribe              = 585;
snd_z_end_spirtspk            = 586;
snd_monster_tera_warrior1     = 589;
snd_monster_tera_drone1       = 594;
snd_monster_tera_matriarch1   = 599;
snd_monster_cyclops1          = 604;
snd_monster_titan1            = 609;
snd_monster_gianttoad1        = 614;
snd_monster_bullfrog1         = 619;
snd_animal_ostard_desert1     = 624;
snd_animal_ostard_frenzied1   = 629;
snd_monster_ophidian_warrior1 = 634;
snd_monster_ophidian_mage1    = 639;
snd_monster_ophidian_queen1   = 644;
snd_monster_lavalizard1       = 649;

snd_special_agility  = 654;
snd_special_air1     = 655;
snd_special_air2     = 656;
snd_special_air3     = 657;
snd_special_air4     = 658;
snd_special_air5     = 659;
snd_monster_lizard1  = 660;
snd_monster_lizard2  = 661;
snd_monster_lizard3  = 662;
snd_monster_lizard4  = 663;
snd_monster_lizard5  = 664;
snd_special_archcure = 665;
snd_monster_centaur  = 679;
snd_monster_centaur2 = 680;

snd_exodus1            = 769;
snd_exodus2            = 770;
snd_dragon_serpentine1 = 649;
snd_elec_1             = 756;
snd_elec_1a            = 757;
snd_elec_2             = 477;
snd_fire_1             = 837;
snd_fire_1a            = 838;
snd_monster_efreet1    = 880;

snd_monster_insect1        = 959;
snd_monster_insect2        = 960;
snd_monster_insect3        = 961;
snd_monster_insect4        = 962;
snd_monster_insect5        = 963;
snd_animal_kirin           = 965;
snd_animal_kirin2          = 966;
snd_monster_longhorn1      = 1016;
snd_monster_longhorn2      = 1017;
snd_monster_longhorn3      = 1018;
snd_monster_longhorn4      = 1019;
snd_monster_longhorn5      = 1020;
snd_monster_pixie          = 1139;
snd_monster_pixie2         = 1140;
snd_animal_seahorse        = 1144;
snd_monster_shadowlord     = 1149;
snd_monster_skeldragon     = 1160;
snd_succubus1              = 1200;
snd_succubus2              = 1201;
snd_succubus3              = 1202;
snd_succubus4              = 1203;
snd_succubus5              = 1204;
snd_animal_unicorn1        = 1212;
snd_animal_crane           = 1240;
snd_animal_crane1          = 1241;
snd_monster_oni            = 1250;
snd_monster_oni2           = 1251;
snd_monster_rune_beetle    = 1255;
snd_monster_rune_beetle2   = 1256;
snd_monster_yomotsu        = 1261;
snd_monster_yamandon       = 1262;
snd_death_beetle1          = 1264;
snd_death_beetle2          = 1265;
snd_death_beetle3          = 1266;
snd_death_beetle4          = 1267;
snd_death_beetle5          = 1268;
snd_monster_gaman          = 1271;
snd_monster_gaman2         = 1272;
snd_animal_hiryu2          = 1276;
snd_animal_hiryu           = 1277;
snd_special_origami1       = 1280;
snd_special_origami2       = 1281;
snd_special_origami3       = 1282;
snd_special_windchimes1    = 1285;
snd_special_windchimes2    = 1286;
snd_special_windchimes3    = 1287;
snd_monster_kappa          = 1290;
snd_monster_kappa1         = 1291;
snd_monster_rev_lion       = 1303;
snd_monster_rev_lion2      = 1304;
snd_monster_tsuki_wolf     = 1324;
snd_monster_tsuki_wolf2    = 1343;
snd_monster_bake_kitsune   = 1345;
snd_monster_changling      = 1386;
snd_monster_corporealbrume = 1386;
snd_monster_fetidessence   = 1388;
snd_monster_hydra          = 1389;
snd_monster_paroxysmus     = 1394;
snd_animal_cusidhe         = 1397;
snd_monster_dryad          = 1405;
snd_monster_intgrizzle1    = 1410;
snd_monster_satyr1         = 1416;
snd_monster_shimmering1    = 1428;
snd_monster_minotaur1      = 1433;
snd_monster_troglodyte     = 1440;

snd_monster_abyssal_infernal = 1493;
snd_monster_acid_slug        = 1497;
snd_monster_bloodworm        = 1501;
snd_monster_boura            = 1505;
snd_monster_chicken_lizard   = 1509;
snd_monster_dragon_faerie    = 1513;
snd_monster_dragon_wolf      = 1517;
snd_monster_dream_wraith     = 1521;
snd_monster_gargoyle_female  = 1525;
snd_monster_gargoyle_male    = 1529;
snd_monster_goblin           = 1534;
snd_monster_goblin_gray      = 1536;
snd_monster_tarantula        = 1538;
snd_monster_homunculous      = 1542;
snd_monster_kepetch          = 1543;
snd_monster_elem_lava        = 1547;
snd_monster_maddening_horror = 1551;
snd_monster_medusa           = 1555;
snd_monster_mimic            = 1559;
snd_monster_navreynighteyes  = 1563;
snd_monster_primeval_lich    = 1567;
snd_monster_raptor           = 1571;
snd_monster_rising_colossus  = 1575;
snd_monster_rotworm          = 1579;
snd_monster_skree            = 1583;
snd_monster_slasherofveils   = 1587;
snd_monster_slith            = 1591;
snd_monster_stoneform        = 1595;
snd_monster_stygian_dragon   = 1599;
snd_monster_spider_trapdoor  = 1603;
snd_monster_gargoyle_undead  = 1607;

snd_spell_lightning         = 41;
snd_spell_chain_lightning   = 41;
snd_spell_harm              = 252;
snd_spell_fireball          = 350;
snd_spell_fire_bolt         = 351;
snd_spell_meteor_swarm      = 352;
snd_spell_clumsy            = 479;
snd_spell_cure              = 480;
snd_spell_archcure          = 480;
snd_spell_curse             = 481;
snd_spell_create_food       = 482;
snd_spell_night_sight       = 483;
snd_spell_light             = 483;
snd_spell_feeblemind        = 484;
snd_spell_magic_arrow       = 485;
snd_spell_weaken            = 486;
snd_spell_agility           = 487;
snd_spell_animate_dead      = 488;
snd_spell_reactive_armor    = 489;
snd_spell_magic_reflection  = 489;
snd_spell_bless             = 490;
snd_spell_cunning           = 491;
snd_spell_protection        = 493;
snd_spell_strength          = 494;
snd_spell_magic_trap        = 495;
snd_spell_magic_untrap      = 496;
snd_spell_heal              = 498;
snd_spell_telekinesis       = 501;
snd_spell_wall_of_stone     = 502;
snd_spell_archprotection    = 503;
snd_spell_mana_drain        = 504;
snd_spell_mana_vampire      = 505;
snd_spell_mark              = 506;
snd_spell_magic_lock        = 506;
snd_spell_mass_curse        = 507;
snd_spell_recall            = 508;
snd_spell_reveal            = 509;
snd_spell_teleport          = 510;
snd_spell_unlock            = 511;
snd_spell_dispel_field      = 513;
snd_spell_dispel            = 513;
snd_spell_mass_dispel       = 513;
snd_spell_greater_heal      = 514;
snd_spell_paralyze          = 516;
snd_spell_poison            = 517;
snd_spell_flamestrike       = 520;
snd_spell_energy_bolt       = 522;
snd_spell_energy_field      = 523;
snd_spell_paralyze_field    = 523;
snd_spell_poison_field      = 523;
snd_spell_fire_field        = 524;
snd_spell_gate_travel       = 526;
snd_spell_polymorph         = 527;
snd_spell_blade_spirits     = 530;
snd_spell_energy_vortex     = 530;
snd_spell_mind_blast        = 531;
snd_spell_resurrection      = 532;
snd_spell_summon_creature   = 533;
snd_spell_summon_daemon     = 534;
snd_spell_summon_elem_air   = 535;
snd_spell_summon_elem_earth = 535;
snd_spell_summon_elem_fire  = 535;
snd_spell_summon_elem_water = 535;
snd_spell_earthquake        = 544;
snd_spell_bone_armor        = 577;
snd_spell_summon_undead     = 586;
snd_spell_explosion         = 775;
snd_spell_incognito         = 957;
snd_spell_invisibility      = 964;

snd_ninjitsu_deathstrike_f    = 1293;
snd_ninjitsu_deathstrike_m    = 1294;
snd_ninjitsu_focus_attack     = 1295;
snd_ninjitsu_ki_attack        = 1296;
snd_ninjitsu_mirror_image     = 1297;
snd_ninjitsu_shadowjump       = 1298;
snd_ninjitsu_suprise_attack_f = 1299;
snd_ninjitsu_suprise_attack_m = 1300;
//snd_ninjitsu_animal_form
//snd_ninjitsu_backstab

snd_bushido_confidence          = 1306;
snd_bushido_evasion             = 1307;
snd_bushido_honorable_execution = 1308;
snd_bushido_lightning_strike    = 1309;
snd_bushido_momentum_strike     = 1310;
//snd_bushido_counter_attack

//snd_combat_armor_ignore
//snd_combat_bleed_attack
//snd_combat_concussion_blow
//snd_combat_crushing_blow
//snd_combat_disarm
//snd_combat_dismount
//snd_combat_doublestrike
//snd_combat_infecting
//snd_combat_mortal_strike
//snd_combat_moving_shot
//snd_combat_paralyzing_blow
//snd_combat_shadow_strike
//snd_combat_riding_swipe
//snd_combat_nerve_strike
//snd_combat_talon_strike
//snd_combat_armor_pierce
snd_combat_whirlwind_attack   = 1311;
snd_combat_block              = 1312;
snd_combat_defense_mastery    = 1313;
snd_combat_doubleshot         = 1314;
snd_combat_doubleshot_2       = 1315;
snd_combat_dual_wield         = 1316;
snd_combat_feint              = 1317;
snd_combat_frenzied_whirlwind = 1318;
snd_combat_bladeweave         = 1468;
snd_combat_forcearrow         = 1469;
snd_combat_force_of_nature    = 1470;
snd_combat_lightning_arrow    = 1471;
//snd_combat_psychic_attack
//snd_combat_serpent_arrow

snd_combat_fukiya        = 1327;
snd_combat_shuriken_hit  = 1328;
snd_combat_shuriken_miss = 1329;
snd_combat_smokebomb     = 1330;

snd_aquarium_deadfish = 1442;
snd_aquarium_rewards  = 1443;
snd_aquarium_use      = 1444;

snd_collection_negative = 1445;
snd_collection_positive = 1446;
snd_collection_reward   = 1447;

snd_spellweave_arcane_circle          = 1472;
snd_spellweave_arcane_empowerment     = 1473;
snd_spellweave_arcane_empowerment_end = 1474;
snd_spellweave_attunement             = 1475;
snd_spellweave_dryad_allure           = 1476;
snd_spellweave_dryad_allure_fail      = 1477;
snd_spellweave_essence_of_wind        = 1478;
snd_spellweave_essence_of_wind_cold   = 1479;
snd_spellweave_ethereal_voyage        = 1480;
snd_spellweave_gift_of_renewal        = 1481;
snd_spellweave_immolating_weapon      = 1482;
snd_spellweave_natures_fury           = 1483;
snd_spellweave_natures_fury_attack    = 1484;
snd_spellweave_natures_fury_idle      = 1485;
snd_spellweave_thunderstorm           = 1486;
snd_spellweave_wildfire               = 1487;
//snd_spellweave_summon_fey
//snd_spellweave_summon_fiend
//snd_spellweave_reaper_form
//snd_spellweave_word_of_death
//snd_spellweave_gift_of_life

[DEFNAME region_flags]
region_antimagic_all        = 00001;  // all magic banned here.
region_antimagic_recall_in  = 00002;  // teleport,recall in to this, and mark
region_antimagic_recall_out = 00004;  // can't recall out of here.
region_antimagic_gate       = 00008;
region_antimagic_teleport   = 00010;  // can't teleport into here.
region_antimagic_damage     = 00020;  // just no bad magic here
region_flag_ship            = 00040;  // this is a ship region. ship commands
region_flag_nobuilding      = 00080;  // no building in this area
//region_flag_globalname      = 00100;  // No longer in use
region_flag_announce        = 00200;  // announce to all who enter.
region_flag_insta_logout    = 00400;  // instant log out is allowed here. (hotel)
region_flag_underground     = 00800;  // dungeon type area. (no weather)
region_flag_nodecay         = 01000;  // things on the ground don't decay here.
region_flag_safe            = 02000;  // this region is safe from all harm.
region_flag_guarded         = 04000;  // try tag.guardowner
region_flag_no_pvp          = 08000;  // players cannot directly harm each other here.
region_flag_arena           = 010000;  // pvp is allowed, no murder or criminal acts are taken in count.

[DEFNAME spell_flags]
spellflag_dir_anim       = 00000001;  // evoke type cast or directed. (animation)
spellflag_targ_item      = 00000002;  // need to target an object
spellflag_targ_char      = 00000004;  // needs to target a living thing
spellflag_targ_obj       = 00000006;  // can target item or char
spellflag_targ_xyz       = 00000008;  // can just target a location.
spellflag_harm           = 00000010;  // the spell is in some way harmfull.
spellflag_fx_bolt        = 00000020;  // effect is a bolt to the target.
spellflag_fx_targ        = 00000040;  // effect is at the target.
spellflag_field          = 00000080;  // create a field of stuff. (fire,poison,wall)
spellflag_summon         = 00000100;  // summon a creature or item.
spellflag_good           = 00000200;  // the spell is a good spell. You intend to help to receiver.
spellflag_resist         = 00000400;  // allowed to resist this.
spellflag_targ_noself    = 00000800;  // cannot target spell to self
spellflag_disabled       = 00008000;  // spell is disabled
spellflag_scripted       = 00010000;  // spell is scripted
spellflag_playeronly     = 00020000;  // spell is not casted by npc ai
spellflag_nounparalyze   = 00040000;  // do not unparalyze the victim
spellflag_no_castanim    = 00080000;  // don't play (default) cast anim
spellflag_targ_no_player = 00100000;  // if a char may be targeted, it may not be a player
spellflag_targ_no_npc    = 00200000;  // if a char may be targeted, it may not be an NPC
spellflag_noprecast      = 00400000;  // disables effects of MAGICF_PRECAST with a spell (only valid if MAGICF_PRECAST actived in Sphere.ini)
spellflag_nofreezeoncast = 00800000;  // disables effects of MAGICF_FREEZEONCAST with a spell (only valid if MAGICF_FREEZEONCAST actived in Sphere.ini)
spellflag_area           = 01000000;  // area effect (uses local.arearadius)
spellflag_poly           = 02000000;  // polymorph yourself
spellflag_targ_dead      = 04000000;  // target is dead (for resurrection-like spells)
spellflag_damage         = 08000000;  // kinda harm but deals damage to the targ, damage type is LOCAL.DamageType.
spellflag_bless          = 010000000;  // Benefitial spells like Bless,Agility,etc.
spellflag_curse          = 020000000;  // Curses just like Weaken,Purge Magic,Curse,etc.
spellflag_heal           = 040000000;  // spell used to heal hitpoints

[DEFNAME mem_flags]
memory_sawcrime    = 00001;  // i saw them commit a crime or i was attacked criminally. i can call the guards on them.
memory_ipet        = 00002;  // i am a pet. (this link is my master) (never time out)
memory_fight       = 00004;  // active fight going on now. may not have done any damage.
memory_iaggressor  = 00008;  // i was the agressor here. (good or evil)
memory_harmedby    = 00010;  // i was attacked by them. (but they may have been retaliating)
memory_irritatedby = 00020;  // i saw them snoop from me or someone.
memory_speak       = 00040;  // we spoke about something at some point. (or was tamed) (npc_mem_act_type)
memory_aggreived   = 00080;  // i was attacked and was the inocent party here !
memory_guard       = 00100;  // guard this item (never time out)
memory_ispawned    = 00200;  // i am spawned from this item. (never time out)
memory_guild       = 00400;  // this is my guild stone. (never time out)
memory_town        = 00800;  // this is my town stone. (never time out)
memory_follow      = 01000;  // UNUSED!!!! i am following this object (never time out)
memory_war_targ    = 02000;  // this is one of my current war targets.
memory_friend      = 04000;
memory_gumprecord  = 08000;  // UNUSED!!!! i've a gump opened TAG.DIALOG_NAME contain the name of the gump

[DEFNAME stat_flags]
// apply to chars
statf_invul         = 000000001;  // invulnerability
statf_dead          = 000000002;
statf_freeze        = 000000004;  // paralyzed. (spell)
statf_invisible     = 000000008;  // invisible (spell).
statf_sleeping      = 000000010;  // you look like a corpse ?
statf_war           = 000000020;  // war mode on ?
statf_reactive      = 000000040;  // have reactive armor on.
statf_poisoned      = 000000080;  // poison level is in the poison object
statf_nightsight    = 000000100;  // all a light to you
statf_reflection    = 000000200;  // magic reflect on.
statf_polymorph     = 000000400;  // we have polymorphed to another form.
statf_incognito     = 000000800;  // dont show skill titles
statf_spiritspeak   = 000001000;  // i can hear ghosts clearly.
statf_insubstantial = 000002000;  // ghost has not manifest. or gm hidden
statf_emoteaction   = 000004000;  // the creature will emote its actions to it's owners.
statf_commcrystal   = 000008000;  // the char can speak to a comm crystal in his bag
statf_hasshield     = 000010000;  // using a shield
statf_archercanmove = 000020000;  // can move with archery
statf_stone         = 000040000;  // turned to stone.
statf_hovering      = 000080000;  // hovering (gargoyle flight)
statf_fly           = 000100000;  // flying or running ? (anim)
statf_hallucinating = 000400000;  // eat 'shrooms or bad food.
statf_hidden        = 000800000;  // hidden (non-magical)
statf_indoors       = 001000000;  // we are covered from the rain.
statf_criminal      = 002000000;  // the guards will attack me. (someone has called guards)
statf_conjured      = 004000000;  // this creature is conjured and will expire. (leave no corpse or loot)
statf_pet           = 008000000;  // i am a pet/hirling. check for my owner memory.
statf_spawned       = 010000000;  // i am spawned by a spawn item.
statf_saveparity    = 020000000;  // has this char been saved or not ?
statf_ridden        = 040000000;  // this is the horse. (don't display me) i am being ridden
statf_onhorse       = 080000000;  // mounted on horseback.

[DEFNAME attr_flags]
// apply to items
attr_identified  = 00001;  // this is the identified name. ???
attr_decay       = 00002;  // timer currently set to decay.
attr_newbie      = 00004;  // not lost on death or sellable ?
attr_move_always = 00008;  // always movable (else default as stored in client) (even if mul says not movable) never decays !
attr_move_never  = 00010;  // never movable (else default as stored in client) never decays !
attr_magic       = 00020;  // don't set this while worn! this item is magic as apposed to marked or markable.
attr_owned       = 00040;  // this is owned by the town. you need to steal it. never decays !
attr_invis       = 00080;  // gray hidden item (to gm's or owners?)
attr_cursed      = 00100;
attr_cursed2     = 00200;  // cursed damned unholy
attr_blessed     = 00400;
attr_blessed2    = 00800;  // blessed sacred holy
attr_forsale     = 01000;  // for sale on a vendor.
attr_stolen      = 02000;  // the item is hot. m_uidlink = previous owner.
attr_can_decay   = 04000;  // this item can decay. but it would seem that it would not (attr_move_never etc)
attr_static      = 08000;  // worldforge merge marker. (not used)
attr_exceptional = 010000;  // is exceptional
attr_enchanted   = 020000;  // is enchanted
attr_imbued      = 040000;  // is imbued
attr_questitem   = 080000;  // is quest item
attr_insured     = 0100000;  // Is insured
attr_nodroptrade = 0200000;  // no-drop/trade
attr_artifact    = 0400000;  // artifact
attr_lockeddown  = 0800000;  // locked down
attr_secure      = 01000000;  // secured
attr_reforged    = 02000000;  // Is Runic Reforged.
attr_opened      = 04000000;  // Is Door Opened (only used when DOOROPENID is set on the door)

[DEFNAME can_flags]
// monster "can" type flags.
mt_male         = 00000;
mt_nonmover     = 00000;
mt_ghost        = 00001;  // Moves through doors
mt_swim         = 00002;  // Moves on water
mt_walk         = 00004;  // Can walk on land
mt_passwalls    = 00008;  // Walk through walls
mt_fly          = 00010;
mt_fire_immune  = 00020;
mt_noindoors    = 00040;  // Can't go under roof
mt_hover        = 00080;  // Hovers (can follow gargoyle flight paths)
mt_equip        = 00100;
mt_usehands     = 00200;
mt_mount        = 00400;  // can ride mountables
mt_female       = 00800;
mt_nonhum       = 01000;  // Body type for combat messages
mt_run          = 02000;
mt_nodclicklos  = 04000;  // when dclicking sth., ignore LOS checks
mt_nodclickdist = 08000;  // when dclicking sth., ignore distance checks

[DEFNAME sector_flags]
secf_nosleep    = 01;  //sector will never sleep, this flag take over secf_instasleep
secf_instasleep = 02;  //sector will sleep as soon as there is no active client inside

[DEFNAME alignments]
// ranges of karma ?
evil        = {-10000 -6001};
chaotic     = {-6000 -2001};
good        = {2000 10000};
wicked      = {-10000 -6001};
belligerent = {-6000 -2001};
neutral     = {-2000 1999};
kindly      = {2000 5999};
goodhearted = {6000 10000};

infamous  = {-10000 -6001};
outlaw    = {-6000 -2001};
anonymous = {-2000 1999};
known     = {2000 5999};
famous    = {6000 10000};

[DEFNAME midis]
// midi music defs
midi_oldult01             = 0;  //loop
midi_create               = 1;  //loop
midi_dragflit             = 2;  //loop
midi_oldult02             = 3;  //loop
midi_oldult03             = 4;  //loop
midi_oldult04             = 5;  //loop
midi_oldult05             = 6;  //loop
midi_oldult06             = 7;  //loop
midi_stones1              = 8;
midi_britain1             = 9;  //loop
midi_britain2             = 10;
midi_bucsden              = 11;  //loop
midi_jhelom               = 12;
midi_lbcastle             = 13;
midi_linelle              = 14;
midi_magincia             = 15;  //loop
midi_minoc                = 16;  //loop
midi_ocllo                = 17;  //loop
midi_samlethe             = 18;  //loop
midi_serpents             = 19;
midi_skarabra             = 20;  //loop
midi_trinsic              = 21;  //loop
midi_vesper               = 22;
midi_wind                 = 23;
midi_yew                  = 24;  //loop
midi_cave01               = 25;
midi_dungeon9             = 26;  //loop
midi_foresta              = 27;  //loop
midi_intown01             = 28;  //loop
midi_junglea              = 29;  //loop
midi_mountaina            = 30;  //loop
midi_plains               = 31;  //loop
midi_sailing              = 32;
midi_swampa               = 33;  //loop
midi_tavern01             = 34;
midi_tavern02             = 35;
midi_tavern03             = 36;
midi_tavern04             = 37;  //loop
midi_combat1              = 38;  //loop
midi_combat2              = 39;  //loop
midi_combat3              = 40;  //loop
midi_approach             = 41;  //loop
midi_death                = 42;
midi_victory              = 43;
midi_btcastle             = 44;
midi_nujelm               = 45;
midi_dungeon2             = 46;  //loop
midi_cove                 = 47;  //loop
midi_moonglow             = 48;  //loop
//Samurai Empire
midi_Zento                = 49;  //loop
midi_TokunoDungeon        = 50;  //loop
midi_Taiko                = 51;  //loop
//Mondain's Legacy
midi_Dread_horn_area      = 52;  //loop
midi_Elf_city_1           = 53;  //loop
midi_Grizzle_dungeon      = 54;  //loop
midi_Melisandes_lair      = 55;  //loop
midi_Paroxysmus_lair      = 56;  //loop
midi_GwennoConversation   = 57;
midi_GoodEndGame          = 58;
midi_GoodVsEvil           = 59;
midi_GreatEarthSerpents   = 60;
midi_Humanoids            = 61;
midi_MinocNegative        = 62;
midi_Paws                 = 63;
midi_SelimsBar            = 64;
midi_SerpentIsleCombat    = 65;
midi_ValoriaShips         = 66;
midi_theWanderer          = 67;
midi_Castle               = 68;
midi_Festival             = 69;
midi_Honor                = 70;
midi_Medieval             = 71;
midi_BattleOnStones       = 72;
midi_Docktown             = 73;
midi_GargoyleQueen        = 74;
midi_GenericCombat        = 75;
midi_HolyCity             = 76;
midi_HumanLevel           = 77;
midi_LoginLoop            = 78;  //loop
midi_ForestStones         = 79;
midi_PrimevalLich         = 80;
midi_QueenPalace          = 81;
midi_RoyalCity            = 82;
midi_SlasherVeil          = 83;
midi_StygianAbyss         = 84;
midi_StygianDragon        = 85;
midi_Void                 = 86;
midi_CodexShrine          = 87;
//High Seas
midi_AnvilStrikeInMinoc   = 88;
midi_ASkaranLullaby       = 89;
midi_BlackthornsMarch     = 90;
midi_DupresNightInTrinsic = 91;
midi_FayaxionAndTheSix    = 92;
midi_FlightOfTheNexus     = 93;
midi_GalehavenJaunt       = 94;
midi_JhelomToArms         = 95;
midi_MidnightInYew        = 96;
midi_MoonglowSonata       = 97;
midi_NewMaginciaMarch     = 98;
midi_NujelmWaltz          = 99;
midi_SherrysSong          = 100;
midi_StarlightInBritain   = 101;
midi_TheVesperMist        = 102;



[DEFNAME needstofix]
// need to be defined. needs and aversions
// none 0
// area types.
r_guardpost              = t_junk;
r_docks                  = t_junk;
r_foliage                = r_jungle;
r_desert                 = t_junk;
r_plains                 = t_junk;
r_civilization           = t_junk;
r_caves                  = t_junk;
r_stables                = t_junk;
r_house                  = t_junk;
r_snow                   = t_junk;
r_magical                = t_junk;
r_mountains              = t_junk;
r_mountains_volcanic     = t_junk;
r_jail                   = t_junk;
r_darkness               = t_junk;
r_light                  = t_junk;
r_sewers                 = t_junk;
//no longer used?
r_goblin_camp            = t_junk;
r_dungeon_terathan_keep  = t_junk;
r_dungeon_bedlam         = t_junk;
r_dungeon_blighted_grove = t_junk;
r_dungeon_citadel        = t_junk;
r_dungeon_prism_of_light = t_junk;
r_dungeon_twisted_weald  = t_junk;
r_orc_camp               = t_junk;
r_ruins                  = t_junk;
r_dungeon_doom           = t_junk;
r_dungeon_paroxysmus     = t_junk;
r_dungeon_exodus         = t_junk;
r_dungeon_khaldun        = t_junk;
r_dungeon_destard        = t_junk;
r_dungeon_fire           = t_junk;
r_dungeon_abyss          = t_junk;
r_dungeon_labyrinth      = t_junk;
r_black_castle           = t_junk;
// item types
t_eerie_stuff            = t_junk;
t_magic                  = t_junk;

[TYPEDEFS]
t_normal             = 0;
t_container          = 1;  // any unlocked container or corpse. ccontainer based
t_container_locked   = 2;
t_door               = 3;  // 3 = door can be opened
t_door_locked        = 4;  // a locked door.
t_key                = 5;
t_light_lit          = 6;  // local light giving object
t_light_out          = 7;  // can be lit.
t_food               = 8;  // edible food. (poisoned food ?)
t_food_raw           = 9;  // must cook raw food unless your an animal.
t_armor              = 10;  // some type of armor. (no real action)
t_weapon_mace_smith  = 11;  // can be used for smithing
t_weapon_mace_sharp  = 12;  // war axe can be used to cut/chop trees.
t_weapon_sword       = 13;  //
t_weapon_fence       = 14;  // can't be used to chop trees. (make kindling)
t_weapon_bow         = 15;  // bow or xbow
t_wand               = 16;  // a magic storage item
t_telepad            = 17;  // walk on teleport
t_switch             = 18;  // this is a switch which effects some other object in the world.
t_book               = 19;  // read this book. (static or dynamic text)
t_rune               = 20;  // can be marked and renamed as a recall rune.
t_booze              = 21;  // booze      (drunk effect)
t_potion             = 22;  // some magic effect.
t_fire               = 23;  // it will burn you.
t_clock              = 24;  // or a wristwatch
t_trap               = 25;  // walk on trap.
t_trap_active        = 26;  // = some animation
t_musical            = 27;  // = a musical instrument.
t_spell              = 28;  // = magic spell effect.
t_gem                = 29;  // = no use yet
t_water              = 30;  // = this is water (fishable) (not a glass of water)
t_clothing           = 31;  // = all cloth based wearable stuff
t_scroll             = 32;  // = magic scroll
t_carpentry          = 33;  // = tool of some sort.
t_spawn_char         = 34;  // = spawn object. should be invis also.
t_game_piece         = 35;  // = can't be removed from game.
t_portculis          = 36;  // = z delta moving gate. (open)
t_figurine           = 37;  // = magic figure that turns into a creature when activated.
t_shrine             = 38;  // = can res you
t_moongate           = 39;  // = linked to other moon gates (hard coded locations)
t_chair              = 40;  // = any sort of a chair item. we can sit on.
t_forge              = 41;  // = used to smelt ore blacksmithy etc.
t_ore                = 42;  // = smelt to ingots.
t_log                = 43;  // = make into furniture etc. lumberlogs
t_tree               = 44;  // = can be chopped.
t_rock               = 45;  // = can be mined for ore.
t_carpentry_chop     = 46;  // = tool of some sort.
t_multi              = 47;  // = multi part object like house or ship.
t_reagent            = 48;  // = alchemy when clicked ?
t_ship               = 49;  // = this is a ship multi
t_ship_plank         = 50;  //
t_ship_side          = 51;  // = should extend to make a plank
t_ship_side_locked   = 52;  //
t_ship_tiller        = 53;  // = tiller man on the ship.
t_eq_trade_window    = 54;  // = container for the trade window.
t_fish               = 55;  // = fish can be cut up.
t_sign_gump          = 56;  // = things like grave stones and sign plaques
t_stone_guild        = 57;  // = guild stones
t_anim_active        = 58;  // = active anium that will recycle when done.
t_sand               = 59;  // = sand on the beach
t_cloth              = 60;  // = bolt or folded cloth
t_hair               = 61;  //
t_beard              = 62;  // = just for grouping purposes.
t_ingot              = 63;  // = ingot.
t_coin               = 64;  // = coin of some sort. gold or otherwise.
t_crops              = 65;  // = a plant that will regrow. picked type.
t_drink              = 66;  // = some sort of drink (non booze)
t_anvil              = 67;  // = for repair.
t_port_locked        = 68;  // = this portcullis must be triggered.
t_spawn_item         = 69;  // = spawn other items.
t_telescope          = 70;  // = big telescope pic.
t_bed                = 71;  // = bed.
t_gold               = 72;  // = gold coin
t_map                = 73;  // = map object with pins.
t_eq_memory_obj      = 74;  // = a char has a memory link to some object. (i am fighting with someone. this records the fight.)
t_weapon_mace_staff  = 75;  // = staff type of mace. or just other type of mace.
t_eq_horse           = 76;  // = equipped horse object represents a riding horse to the client.
t_comm_crystal       = 77;  // = communication crystal.
t_game_board         = 78;  // = this is a container of pieces.
t_trash_can          = 79;  // = delete any object dropped on it.
t_cannon_muzzle      = 80;  // = cannon muzzle. not the other cannon parts.
t_cannon             = 81;  // = the rest of the cannon.
t_cannon_ball        = 82;  //
t_armor_leather      = 83;  // = non metallic armor (t_clothing)
t_seed               = 84;  // = fruit to seed
t_junk               = 85;  // = never used
t_crystal_ball       = 86;  //
t_swamp              = 87;  // = swamp (smelly)
t_message            = 88;  // = user written message item. (for bboard ussually)
t_reagent_raw        = 89;  // = freshly grown reagents...not processed yet.
t_eq_client_linger   = 90;  // = change player to npc for a while.
t_snow               = 91;  // = snow
t_it_stone           = 92;  // = double click for items
t_unused_93          = 93;
t_explosion          = 94;  // = async explosion.
t_eq_npc_script      = 95;  // = script npc actions in the form of a book. (get rid of this in favor of waiting on m_events)
t_web                = 96;  // = walk on this and transform into some other object.
t_grass              = 97;  // = can be eaten by grazing animals
t_arock              = 98;  // = a rock or boulder. can be thrown by giants.
t_tracker            = 99;  // = points to a linked object.
t_sound              = 100;  // = this is a sound source.
t_stone_town         = 101;  // = town stones. everyone free to join.
t_weapon_mace_crook  = 102;  //
t_weapon_mace_pick   = 103;  //
t_leather            = 104;  // = leather or skins of some sort.(not wearable)
t_ship_other         = 105;  // = some other part of a ship.
t_bboard             = 106;  // = a container and bboard object.
t_spellbook          = 107;  // = spellbook (with spells)
t_corpse             = 108;  // = special type of item.
t_track_item         = 109;  // - track a id or type of item.
t_track_char         = 110;  // = track a char or range of char id's
t_weapon_arrow       = 111;  //
t_weapon_bolt        = 112;  //
t_eq_vendor_box      = 113;  // = an equipped vendor .
t_eq_bank_box        = 114;  // = an equipped bank box
t_deed               = 115;  //
t_loom               = 116;  //
t_bee_hive           = 117;  //
t_archery_butte      = 118;  //
t_eq_murder_count    = 119;  // = my murder count flag.
t_eq_stuck           = 120;  // we are stuck in a web
t_trap_inactive      = 121;  //  = a safe trap.
//t_unused_122          122
t_bandage            = 123;  //  = can be used for healing.
t_campfire           = 124;  //  = this is a fire but a small one.
t_map_blank          = 125;
t_spy_glass          = 126;
t_sextant            = 127;
t_scroll_blank       = 128;
t_fruit              = 129;
t_water_wash         = 130;  // water that will not contain fish. (for washing or drinking)
t_weapon_axe         = 131;  // not the same as a sword. but uses swordsmanship skill
t_weapon_xbow        = 132;
t_spellicon          = 133;
t_door_open          = 134;
t_meat_raw           = 135;  // just a meaty part of a corpse. (uncooked meat)
t_garbage            = 136;
t_keyring            = 137;
t_table              = 138;  // doesn't really do anything.
t_floor              = 139;
t_roof               = 140;
t_feather            = 141;  // a birds feather
t_wool               = 142;  // wool cut frm a sheep.
t_fur                = 143;
t_blood              = 144;  // blood of some creature
t_foliage            = 145;  // does not go invis when reaped. but will if eaten
t_grain              = 146;
t_scissors           = 147;
t_thread             = 148;
t_yarn               = 149;
t_spinwheel          = 150;
t_bandage_blood      = 151;  //  = can't be used for healing.
t_fish_pole          = 152;
t_shaft              = 153;  // bolt or arrow.
t_lockpick           = 154;
t_kindling           = 155;
t_train_dummy        = 156;
t_train_pickpocket   = 157;
t_bedroll            = 158;
t_bellows            = 159;
t_hide               = 160;  // made into leather.
t_cloth_bolt         = 161;
t_board              = 162;  // = logs are plained into decent lumber
t_pitcher            = 163;
t_pitcher_empty      = 164;
t_dye_vat            = 165;
t_dye                = 166;
t_potion_empty       = 167;  // empty bottle.
t_mortar             = 168;
t_hair_dye           = 169;
t_sewing_kit         = 170;
t_tinker_tools       = 171;
t_wall               = 172;  // wall of a structure.
t_window             = 173;  // window for a structure.
t_cotton             = 174;  // cotton from the plant
t_bone               = 175;
t_eq_script          = 176;  // pure scriptable item equipped.
t_ship_hold          = 177;  // ships hold.
t_ship_hold_lock     = 178;
t_lava               = 179;
t_shield             = 180;  // equippable armor.
t_jewelry            = 181;
t_dirt               = 182;  // a patch of dirt where i can plant something
t_script             = 183;
t_spellbook_necro    = 184;  // AOS Necromancy spellbook (should have MOREZ=100 by default)
t_spellbook_pala     = 185;  // AOS Paladin spellbook (should have MOREZ=200 by default)
t_spellbook_extra    = 186;  // some spellbook for script purposes (MOREZ=basic offset, should 1000 or more)
t_spellbook_bushido  = 187;  // SE Bushido spellbook (should have MOREZ=400 by default)
t_spellbook_ninjitsu = 188;  // SE Ninjitsu spellbook (should have MOREZ=500 by default)
t_spellbook_arcanist = 189;  // ML Spellweaver spellbook (should have MOREZ=600 by default)
t_multi_custom       = 190;  // Customisable multi
t_spellbook_mystic   = 191;  // SA Mysticism spellbook (should have MOREZ=677 by default)
t_hoverover          = 192;  // Hover-over item (CAN_I_HOVER can hover over blocking items)
t_spellbook_bard     = 193;  // SA Bard spellbook (should have MOREZ=700 by default)
t_weapon_throwing    = 194;  // Throwing Weapon
t_cartography        = 195;  // cartography tool
t_cooking            = 196;  // cooking tool
t_pilot              = 197;  // t_pilot (PacketWheelBoatMove)
t_rope               = 198;  // almost the same as a ship plank, but not lockable by default.
t_healing_stone      = 199;

//Add custom types after 500 to leave room for future hardcoded types
t_forest     = 500;  // Forest Tiles
t_jungle     = 501;  // Jungle Tiles
t_furniture  = 502;  // Furniture
t_soul_forge = 503;  // Soul Forge

[DEFNAME layers]
layer_hand1      = 1;
layer_hand2      = 2;
layer_shoes      = 3;
layer_pants      = 4;  // bone legs + pants.
layer_shirt      = 5;
layer_helm       = 6;
layer_gloves     = 7;
layer_ring       = 8;
layer_talisman   = 9;  // talisman (se and ml)
layer_collar     = 10;  // gorget or necklace.
layer_hair       = 11;
layer_half_apron = 12;
layer_chest      = 13;  // armor chest
layer_wrist      = 14;  // watch
layer_light      = 15;  // a itemid_light_src equip item can be put here.
layer_beard      = 16;  // try to have only men have this.
layer_tunic      = 17;  // jester suit or full apron.
layer_ears       = 18;  // earrings
layer_arms       = 19;  // armor
layer_cape       = 20;  // cape
layer_pack       = 21;  // only used by itemid_backpack
layer_robe       = 22;  // robe over all.
layer_skirt      = 23;  // skirt or kilt.
layer_legs       = 24;  // 0x18 = plate legs.

// these are not part of the paper doll (but get sent to the client)
layer_horse        = 25;  // ride this object. (horse objects are strange?)
layer_vendor_stock = 26;  // the stuff the vendor will restock and sell to the players
layer_vendor_extra = 27;  // the stuff the vendor will resell to players but is not restocked. (bought from players)
layer_vendor_buys  = 28;  // the stuff the vendor can buy from players but does not stock.
layer_bankbox      = 29;  // contents of my bank box.

// internally used layers - don't bother sending these to client.
layer_special  = 30;  // can be multiple of these. memories
layer_dragging = 31;

// spells that are effecting us go here.
layer_spell_stats         = 32;  // stats effecting spell. these cancel each other out.
layer_spell_reactive      = 33;
layer_spell_night_sight   = 34;
layer_spell_protection    = 35;
layer_spell_incognito     = 36;
layer_spell_magic_reflect = 37;
layer_spell_paralyze      = 38;  // or turned to stone.
layer_spell_invis         = 39;
layer_spell_polymorph     = 40;
layer_spell_summon        = 41;  // magical summoned creature.

layer_flag_poison        = 42;
layer_flag_criminal      = 43;  // criminal or murderer ?
layer_flag_potion        = 44;  // some magic type effect done by a potion. (they cannot be dispelled)
layer_flag_spiritspeak   = 45;
layer_flag_wool          = 46;  // regrowing wool.
layer_flag_drunk         = 47;  // booze effect.
layer_flag_clientlinger  = 48;
layer_flag_hallucination = 49;  // shrooms etc.
layer_flag_potionused    = 50;  // track the time till we can use a potion again.
layer_flag_stuck         = 51;  // in a trap or web.
layer_flag_murders       = 52;  // how many murders do we have ? and decay timer.
layer_flag_bandage       = 53;  // bandages go here for healing
layer_auction            = 54;  // layer for script purposes to equip container on character (like auction system)

//Necromancy
LAYER_SPELL_Blood_Oath   = 55;
LAYER_SPELL_Curse_Weapon = 56;
LAYER_SPELL_Corpse_Skin  = 57;
LAYER_SPELL_Evil_Omen    = 58;
LAYER_SPELL_Pain_Spike   = 59;
LAYER_SPELL_Mind_Rot     = 60;
LAYER_SPELL_Strangle     = 61;

//Chivalry
LAYER_SPELL_Consecrate_Weapon = 62;
LAYER_SPELL_Divine_Fury       = 63;
LAYER_SPELL_Enemy_Of_One      = 64;

//SpellWeaving
LAYER_SPELL_Attunement         = 65;
LAYER_SPELL_Gift_Of_Renewal    = 66;
LAYER_SPELL_Immolating_Weapon  = 67;
LAYER_SPELL_Thunderstorm       = 68;
LAYER_SPELL_Arcane_Empowerment = 69;
LAYER_SPELL_Ethereal_Voyage    = 70;
LAYER_SPELL_Gift_Of_Life       = 71;
LAYER_SPELL_Dryad_Allure       = 72;
LAYER_SPELL_Essence_Of_Wind    = 73;

//Mysticism
LAYER_SPELL_Sleep          = 74;
LAYER_SPELL_Bombard        = 75;
LAYER_SPELL_Spell_Plague   = 76;
LAYER_SPELL_Nether_Cyclone = 77;



[DEFNAME def_gumps]
// name the gumps.
g_btn_green_ok         = 081a;
g_btn_green_ok_press   = 081b;
g_btn_gray_apply       = 5204;
g_btn_gray_apply_press = 5205;



[DEFNAME dam_flags]
dam_god          = 00001;  // unblockable "god" damage
dam_physical     = 00002;  // some sort of physical damage (as opposed to magical)
dam_magic        = 00004;  // some sort of magical damage
dam_poison       = 00008;  // poison-based damage
dam_fire         = 00010;  // fire-based damage
dam_energy       = 00020;  // energy-based damage
dam_general      = 00080;  // damage that hits the entire body, rather than just one part of it
dam_acidic       = 00100;  // acidic damage (will destroy armor)
dam_cold         = 00200;  // cold-based damage
dam_slash        = 00400;  // damage done by slashing (swords, etc)
dam_pierce       = 00800;  // damage done with spear and such.
dam_noreveal     = 04000;  // damage that does not reveal the attacker.
dam_nounparalyze = 08000;  // victim won't be unparalyzed
dam_fixed        = 010000;  // damage will not be recalculated with default checks, lowering it because of armor, resistances ...

[DEFNAME can_i_flags]
can_i_door         = 000001;  // is a door uflag4_door
can_i_water        = 000002;  // need to swim in it. uflag1_water
can_i_platform     = 000004;  // we can walk on top of it. (even tho the item itself might block) uflag2_platform
can_i_block        = 000008;  // need to walk thru walls or fly over. uflag1_block
can_i_climb        = 000010;  // step up on it, uflag2_climbable
can_i_fire         = 000020;  // is a fire. ussually blocks as well. uflag1_damage
can_i_roof         = 000040;  // we are under a roof. can't rain on us. uflag4_roof
can_i_hover        = 000080;  // we are hovering. uflag4_hoverover
can_i_pile         = 000100;  // can item be piled uflag2_stackable (*.mul)
can_i_dye          = 000200;  // can item be dyed uflag3_cloth? (sort of)
can_i_flip         = 000400;  // will flip by default.
can_i_light        = 000800;  // uflag3_light
can_i_repair       = 001000;  // is it repairable (difficulty based on value)
can_i_replicate    = 002000;  // things like arrows are pretty much all the same.
can_i_dcignorelos  = 004000;  // when dclicked, ignore los checks
can_i_dcignoredist = 008000;  // when dclicked, ignore distance checks
can_i_blocklos     = 010000;  // blocks los, but not walking thru
can_i_exceptional  = 020000;  // can items be exceptional
can_i_makersmark   = 040000;  // can items hold makers mark
can_i_retaincolor  = 080000;  // can items retain material colors
can_i_enchant      = 0100000;  // can items be enchanted (runic)
can_i_imbue        = 0200000;  // can items be imbued (imbuing)
can_i_recycle      = 0400000;  // Can be recycled
can_i_reforge      = 0800000;  // Can be Runic Reforged.
can_i_forcedc      = 01000000;  // Items with this flag will not perform any check before @DClick trigger.

[DEFNAME tile_flags]
tilef_background  = 000000001;  // No idea. None whatsoever. Maybe it's the blackness.
tilef_weapon      = 000000002;  // I smack thee with this here ... club?
tilef_transparent = 000000004;  // Yeah. So we can see through it?
tilef_translucent = 000000008;  // Okay...
tilef_wall        = 000000010;  // Hey look, we can't walk through it!
tilef_damaging    = 000000020;  // Lava, perhaps? Fires, hmm!
tilef_impassable  = 000000040;  // Mountains and stuff, I'll wager.
tilef_wet         = 000000080;  // Water? Or mud? Or a slick road in a rainstorm? Probably the first.
tilef_unknown     = 000000100;  // Uh...
tilef_surface     = 000000200;  // Tables or something?
tilef_bridge      = 000000400;  // I wonder why they'd have a flag for that.
tilef_stackable   = 000000800;  // Can be stacked
tilef_window      = 000001000;  // So we can see/shoot out?
tilef_noshoot     = 000002000;  // ? We can't shoot out or something? So, like a glass window maybe?
tilef_prefixA     = 000004000;  // A card
tilef_prefixAn    = 000008000;  // An apple
tilef_internal    = 000010000;  // hair, beards, etc
tilef_foliage     = 000020000;  // Probably bushes and tree leaves and stuff.
tilef_partialHue  = 000040000;  // semi-glowy?
tilef_unknown_1   = 000080000;  // Well, gee. I should see if it's used on anything...
tilef_map         = 000100000;  // Sounds good to me.
tilef_container   = 000200000;  // They flag these!?
tilef_wearable    = 000400000;  // Omigod!
tilef_lightSource = 000800000;  // I'm getting tired of typing repetitive shiznit now.
tilef_animated    = 001000000;  // Like fire again. And stuff. Those spinny propeller thingies!
tilef_hoverover   = 002000000;  // Can be hovered over
tilef_unknown_2   = 004000000;  // I really hope some of these unknowns are n/w/s/e facing flags.
tilef_armor       = 008000000;  // Armor, okay, so does that count shields? Hmmm?
tilef_roof        = 010000000;  // "Don't fall through me!" Or why isn't it just flagged surface or something?
tilef_door        = 020000000;  // Okay...
tilef_stairBack   = 040000000;  // Don't we have stairs that go forward or left too? This could cover both...
tilef_stairRight  = 080000000;  // Well, whatever, you can climb them, so, hey... Good use for a

[DEFNAME def_html] // useful with htmlgumps
L1 = "<";
R1 = ">";

B         = "<b>";
BE        = "</b>";
BIG       = "<big>";
BIGE      = "</big>";
SMALL     = "<small>";
SMALLE    = "</small>";
EM        = "<em>";
EME       = "</em>";
U         = "<u>";
UE        = "</u>";
I         = "<i>";
IE        = "</i>";
H1        = "<h1>";
H1E       = "</h1>";
H2        = "<h2>";
H2E       = "</h2>";
H3        = "<h3>";
H3E       = "</h3>";
H4        = "<h4>";
H4E       = "</h4>";
H5        = "<h5>";
H5E       = "</h5>";
H6        = "<h6>";
H6E       = "</h6>";
A         = "<a";
AE        = "</a>";
BR        = "<br>";
CENTER    = "<center>";
CENTERE   = "</center>";
DIV_LEFT  = "<div align='left'>";
DIV_RIGHT = "<div align='right'>";
DIV_END   = "</div>";

BFONT       = "<basefont";
BFONTE      = "</basefont>";
BFONT_SIZE1 = "<basefont size='1'>";
BFONT_SIZE2 = "<basefont size='2'>";
BFONT_SIZE3 = "<basefont size='3'>";
BFONT_SIZE4 = "<basefont size='4'>";
BFONT_SIZE5 = "<basefont size='5'>";
BFONT_SIZE7 = "<basefont size='7'>";

BFONT_BLACK      = "<basefont color='#000008'>";
BFONT_WHITE      = "<basefont color='#ffffff'>";
BFONT_LIME       = "<basefont color='#00ff00'>";
BFONT_LRED       = "<basefont color='#ffcccc'>";
BFONT_RED        = "<basefont color='#ff0000'>";
BFONT_DRED       = "<basefont color='#8b0000'>";
BFONT_LYELLOW    = "<basefont color='#ffffc8'>";
BFONT_YELLOW     = "<basefont color='#ffff00'>";
BFONT_DYELLOW    = "<basefont color='#8b8b00'>";
BFONT_LCYAN      = "<basefont color='#e0ffff'>";
BFONT_CYAN       = "<basefont color='#00ffff'>";
BFONT_DCYAN      = "<basefont color='#008b8b'>";
BFONT_LGRAY      = "<basefont color='#d3d3d3'>";
BFONT_GRAY       = "<basefont color='#808080'>";
BFONT_DGRAY      = "<basefont color='#a9a9a9'>";
BFONT_LGREEN     = "<basefont color='#90ee90'>";
BFONT_GREEN      = "<basefont color='#008000'>";
BFONT_DGREEN     = "<basefont color='#006400'>";
BFONT_LORANGE    = "<basefont color='#ffc600'>";
BFONT_ORANGE     = "<basefont color='#ffa500'>";
BFONT_DORANGE    = "<basefont color='#ff8c00'>";
BFONT_LBLUE      = "<basefont color='#add8e6'>";
BFONT_BLUE       = "<basefont color='#0000ff'>";
BFONT_DBLUE      = "<basefont color='#00008b'>";
BFONT_LSLATEBLUE = "<basefont color='#ceceff'>";
BFONT_SLATEBLUE  = "<basefont color='#8484ff'>";
BFONT_DSLATEBLUE = "<basefont color='#483d8b'>";
BFONT_LPURPLE    = "<basefont color='#8968cd'>";
BFONT_PURPLE     = "<basefont color='#800080'>";
BFONT_DPURPLE    = "<basefont color='#551a8b'>";

[DEFNAME profession_ids]
// ARGN2 in f_oncreate_char
prof_unknown     = 0;
prof_warrior     = 1;
prof_magician    = 2;
prof_blacksmith  = 3;
prof_necromancer = 4;
prof_paladin     = 5;
prof_samurai     = 6;
prof_ninja       = 7;

[DEFNAME resdisp_version]
// RESDISP is a property of the user ACCOUNT
RDS_PRET2A = 0;
RDS_T2A    = 1;
RDS_LBR    = 2;
RDS_AOS    = 3;
RDS_SE     = 4;
RDS_ML     = 5;
RDS_KR     = 6;
RDS_SA     = 7;

[DEFNAME talkmode_type]
// When client or server send a speech packet these have a type
// You can use them to send a packet or to check ARGN1 in the global speech hook
talkmode_system   = 0;  // Normal system message.    (client <-> server)
talkmode_prompt   = 1;  // Display as system prompt.    (client <-  server)
talkmode_emote    = 2;  // *smiles* at object.     (client  -> server) (client shortcut: :+space)
talkmode_say      = 3;  // A chacter speaking.     (client <-  server)
talkmode_obj      = 4;  // At Object      (client <-  server)
talkmode_nothing  = 5;  // Does not display     (client <-  server)
talkmode_item     = 6;  // Text labeling an item. Preceeded by "You see" (client <-  server)
talkmode_noscroll = 7;  // As a status msg. Does not scroll   (client <-  server)
talkmode_whisper  = 8;  // Only those close can hear.    (client  -> server) (client shortcut: ;+space)
talkmode_yell     = 9;  // Can be heard 2 screens away.   (client  -> server) (client shortcut: !+space)
talkmode_spell    = 10;  // Used by spells     (client <-  server)
talkmode_guild    = 13;  // Used by guild chat     (client  -> server) (client shortcut: \)
talkmode_alliance = 14;  // Used by alliance chat    (client  -> server) (client shortcut: shift+\)

[DEFNAME skill_flags]
// These flags are used in SKILL definitions
SKF_SCRIPTED   = 0001;  // fully scripted, no hardcoded behaviour
SKF_FIGHT      = 0002;  // considered a fight skill, maintains fight active
SKF_MAGIC      = 0004;  // considered a magic skill
SKF_CRAFT      = 0008;  // considered a crafting skill, compatible with MAKEITEM function
SKF_IMMOBILE   = 0010;  // skilluser can not move while skilluse
SKF_SELECTABLE = 0020;  // from skill list. ATTENTION: This does _not_ place the button next to the skill in the client's skill list! For this you have to edit skills.mul.
SKF_NOMINDIST  = 0040;  // you can mine, fish, chop, hack on the same point you are standing on
SKF_NOANIM     = 0080;  // don't show hardcoded anim for this skill
SKF_NOSFX      = 0100;  // don't play hardcoded sound for this skill
SKF_RANGED     = 0200;  // considered a ranged skill (combine with SKF_FIGHT)
SKF_GATHER     = 0400;  // Gathering skill.

[DEFNAME skill_titles]
// Skill ranges for the titles
SKILLTITLE_NEOPHYTE    = 300;  // this skill lever or higher applies this skilltitle (until a greater one is reached)
SKILLTITLE_NOVICE      = 400;
SKILLTITLE_APPRENTICE  = 500;
SKILLTITLE_JOURNEYMAN  = 600;
SKILLTITLE_EXPERT      = 700;
SKILLTITLE_ADEPT       = 800;
SKILLTITLE_MASTER      = 900;
SKILLTITLE_GRANDMASTER = 1000;
SKILLTITLE_ELDER       = 1100;  // This works with the normal skills and Bushido/Ninjitsu too.
SKILLTITLE_LEGENDARY   = 1200;  // Same here

[DEFNAME trigger_argtype]
TAT_AS_ARGN = 1;  // Treat the arguments as ARGN1/2/3
TAT_AS_ARGS = 2;  // Treat the arguments as ARGS (with ARGV[x] enabled)
TAT_AS_ARGO = 3;  // Treat the arguments as ARGO

[DEFNAME misc_own]
empty_cliloc  = 1042971;
empty_cliloc2 = 1070722;

[DEFNAME los_flags]
los_nb_local_terrain = 00001;  // Terrain inside a region I am standing in does not block LOS
los_nb_local_static  = 00002;  // Static items inside a region I am standing in do not block LOS
los_nb_local_dynamic = 00004;  // Dynamic items inside a region I am standing in do not block LOS
los_nb_local_multi   = 00008;  // Multi items inside a region I am standing in do not block LOS
los_nb_terrain       = 00010;  // Terrain does not block LOS at all
los_nb_static        = 00020;  // Static items do not block LOS at all
los_nb_dynamic       = 00040;  // Dynamic items do not block LOS at all
los_nb_multi         = 00080;  // Multi items do not block LOS at all
los_nb_windows       = 00100;  // Windows do not block LOS (e.g. Archery + Magery)
los_no_other_region  = 00200;  // Do not allow LOS path checking to go out of your region
los_nc_multi         = 00400;  // Do not allow LOS path checking to go through (no cross) a multi region (except the one you are standing in)
los_fishing          = 00800;  // Do not allow LOS path checking to go through objects or terrain which do not represent water
los_nc_water         = 01000;  // Do not allow LOS path checking to go through water.

[DEFNAME passive_buff_icons]
passivebufficon_hidingandorstealth = 1012;
passivebufficon_activemeditation   = 1013;
passivebufficon_incognito          = 1032;
passivebufficon_disguised          = 1033;
passivebufficon_polymorph          = 1035;
passivebufficon_gargoylefly        = 1054;
passivebufficon_despair            = 1060;

[DEFNAME debuff_icons]
debufficon_Dismount        = 1001;
debufficon_DeathStrike     = 1006;
debufficon_EvilOmen        = 1007;
debufficon_HealingThrottle = 1008;
debufficon_StaminaThrottle = 1009;
debufficon_BloodOathCurse  = 1015;
debufficon_CorpseSkin      = 1016;
debufficon_MindRot         = 1017;
debufficon_PainSpike       = 1018;
debufficon_Strangle        = 1019;
debufficon_ThunderStorm    = 1022;
debufficon_EssenceOfWind   = 1023;
debufficon_MortalStrike    = 1027;
debufficon_Paralyze        = 1037;
debufficon_Poison          = 1038;
debufficon_Bleed           = 1039;
debufficon_Clumsy          = 1040;
debufficon_Feeblemind      = 1041;
debufficon_Weaken          = 1042;
debufficon_Curse           = 1043;
debufficon_MassCurse       = 1044;
debufficon_Sleep           = 1049;
debufficon_SpellPlague     = 1051;
debufficon_Tribulation     = 1059;

// new 'stats'
debufficon_HitLowerAttack  = 1063;
debufficon_HitLowerDefense = 1064;
debufficon_SpellFocusing   = 1071;
debufficon_RageFocusing    = 1072;
debufficon_ForceArrow      = 1076;
debufficon_Disarm          = 1077;
debufficon_TalonStrike     = 1080;
debufficon_PhysicAttack    = 1081;  //stractics say PhychicAttack?

debufficon_EnemyOfOne              = 1084;
debufficon_FandancerFanFire        = 1105;
debufficon_Rage                    = 1106;
debufficon_Webbing                 = 1107;
debufficon_MedusaStone             = 1108;
debufficon_DragonSlasherFear       = 1109;
debufficon_AuraOfNausea            = 1110;
debufficon_HowlOfCacophony         = 1111;
debufficon_GazeDespair             = 1112;
debufficon_HiryuPhysicalResistance = 1113;
debufficon_RuneBeetleCorruption    = 1114;
debufficon_BloodWormAnemia         = 1115;
debufficon_RotwormBloodDisease     = 1116;
debufficon_SkillUseDelay           = 1117;
debufficon_FactionStatLoss         = 1118;
debufficon_HeatOfBattle            = 1119;
debufficon_CriminalStatus          = 1120;
debufficon_ArmorPierce             = 1121;
debufficon_SplinteringEffect       = 1122;
debufficon_SwingSpeedSwing         = 1123;

// these should exists according to stratics, but I couldn't find them
//debufficon_ArmorCorrupt
//debufficon_Entangle
//debufficon_FallingWalls
//debufficon_Criminal
[DEFNAME skill_titles]
// Skill ranges for the titles
SKILLTITLE_NEOPHYTE    = 300;  // this skill lever or higher applies this skilltitle (until a greater one is reached)
SKILLTITLE_NOVICE      = 400;
SKILLTITLE_APPRENTICE  = 500;
SKILLTITLE_JOURNEYMAN  = 600;
SKILLTITLE_EXPERT      = 700;
SKILLTITLE_ADEPT       = 800;
SKILLTITLE_MASTER      = 900;
SKILLTITLE_GRANDMASTER = 1000;
SKILLTITLE_ELDER       = 1100;  // This works with the normal skills and Bushido/Ninjitsu too.
SKILLTITLE_LEGENDARY   = 1200;  // Same here

[DEFNAME trigger_argtype]
TAT_AS_ARGN = 1;  // Treat the arguments as ARGN1/2/3
TAT_AS_ARGS = 2;  // Treat the arguments as ARGS (with ARGV[x] enabled)
TAT_AS_ARGO = 3;  // Treat the arguments as ARGO

[DEFNAME misc_own]
empty_cliloc  = 1042971;
empty_cliloc2 = 1070722;

[DEFNAME los_flags]
los_nb_local_terrain = 00001;  // Terrain inside a region I am standing in does not block LOS
los_nb_local_static  = 00002;  // Static items inside a region I am standing in do not block LOS
los_nb_local_dynamic = 00004;  // Dynamic items inside a region I am standing in do not block LOS
los_nb_local_multi   = 00008;  // Multi items inside a region I am standing in do not block LOS
los_nb_terrain       = 00010;  // Terrain does not block LOS at all
los_nb_static        = 00020;  // Static items do not block LOS at all
los_nb_dynamic       = 00040;  // Dynamic items do not block LOS at all
los_nb_multi         = 00080;  // Multi items do not block LOS at all
los_nb_windows       = 00100;  // Windows do not block LOS (e.g. Archery + Magery)
los_no_other_region  = 00200;  // Do not allow LOS path checking to go out of your region
los_nc_multi         = 00400;  // Do not allow LOS path checking to go through (no cross) a multi region (except the one you are standing in)
los_fishing          = 00800;  // Do not allow LOS path checking to go through objects or terrain which do not represent water
los_nc_water         = 01000;  // Do not allow LOS path checking to go through water.

[DEFNAME passive_buff_icons]
passivebufficon_hidingandorstealth = 1012;
passivebufficon_activemeditation   = 1013;
passivebufficon_incognito          = 1032;
passivebufficon_disguised          = 1033;
passivebufficon_polymorph          = 1035;
passivebufficon_gargoylefly        = 1054;
passivebufficon_despair            = 1060;

[DEFNAME debuff_icons]
debufficon_Dismount        = 1001;
debufficon_DeathStrike     = 1006;
debufficon_EvilOmen        = 1007;
debufficon_HealingThrottle = 1008;
debufficon_StaminaThrottle = 1009;
debufficon_BloodOathCurse  = 1015;
debufficon_CorpseSkin      = 1016;
debufficon_MindRot         = 1017;
debufficon_PainSpike       = 1018;
debufficon_Strangle        = 1019;
debufficon_ThunderStorm    = 1022;
debufficon_EssenceOfWind   = 1023;
debufficon_MortalStrike    = 1027;
debufficon_Paralyze        = 1037;
debufficon_Poison          = 1038;
debufficon_Bleed           = 1039;
debufficon_Clumsy          = 1040;
debufficon_Feeblemind      = 1041;
debufficon_Weaken          = 1042;
debufficon_Curse           = 1043;
debufficon_MassCurse       = 1044;
debufficon_Sleep           = 1049;
debufficon_SpellPlague     = 1051;
debufficon_Tribulation     = 1059;

// new 'stats'
debufficon_HitLowerAttack  = 1063;
debufficon_HitLowerDefense = 1064;
debufficon_SpellFocusing   = 1071;
debufficon_RageFocusing    = 1072;
debufficon_ForceArrow      = 1076;
debufficon_Disarm          = 1077;
debufficon_TalonStrike     = 1080;
debufficon_PhysicAttack    = 1081;  //stractics say PhychicAttack?

debufficon_EnemyOfOne              = 1084;
debufficon_FandancerFanFire        = 1105;
debufficon_Rage                    = 1106;
debufficon_Webbing                 = 1107;
debufficon_MedusaStone             = 1108;
debufficon_DragonSlasherFear       = 1109;
debufficon_AuraOfNausea            = 1110;
debufficon_HowlOfCacophony         = 1111;
debufficon_GazeDespair             = 1112;
debufficon_HiryuPhysicalResistance = 1113;
debufficon_RuneBeetleCorruption    = 1114;
debufficon_BloodWormAnemia         = 1115;
debufficon_RotwormBloodDisease     = 1116;
debufficon_SkillUseDelay           = 1117;
debufficon_FactionStatLoss         = 1118;
debufficon_HeatOfBattle            = 1119;
debufficon_CriminalStatus          = 1120;
debufficon_ArmorPierce             = 1121;
debufficon_SplinteringEffect       = 1122;
debufficon_SwingSpeedSwing         = 1123;

// these should exists according to stratics, but I couldn't find them
//debufficon_ArmorCorrupt
//debufficon_Entangle
//debufficon_FallingWalls
//debufficon_Criminal

[DEFNAME ref_types]
tref_serv         = 000001;
tref_file         = 000002;
tref_newfile      = 000004;
tref_db           = 000008;
tref_resdef       = 000010;
tref_resbase      = 000020;
tref_functionargs = 000040;
tref_fileobj      = 000080;
tref_fileobjcont  = 000100;
tref_account      = 000200;
tref_stonemember  = 000800;
tref_serverdef    = 001000;
tref_sector       = 002000;
tref_world        = 004000;
tref_gmpage       = 008000;
tref_client       = 010000;
tref_object       = 020000;
tref_char         = 040000;
tref_item         = 080000;

[DEFNAME death_flags]
death_nofamechange     = 001;
death_nocorpse         = 002;
death_nolootdrop       = 004;
death_noconjuredeffect = 008;
death_hascorpse        = 010;

[DEFNAME noto_types]
noto_good       = 1;
noto_guild_same = 2;
noto_neutral    = 3;
noto_criminal   = 4;
noto_guild_war  = 5;
noto_evil       = 6;
noto_invul      = 7;

// CanUse flags
// Uses new internal variable CANUSE. Script for this is in the addon's folder in the script pack.
// Used on items for checks or npcs (mounts, golems, etc)

[DEFNAME canuse_flags]
can_u_all      = 0;
can_u_male     = 01;
can_u_female   = 02;
can_u_human    = 04;
can_u_elf      = 08;
can_u_gargoyle = 010;
can_u_none     = 020;

[DEFNAME swing_types]
WAR_SWING_EQUIPPING = 00;  // we are recoiling our weapon.
WAR_SWING_READY     = 01;  // we can swing at any time.
WAR_SWING_SWINGING  = 02;  // we are swinging our weapon.

[DEFNAME expansions]
EXPANSION_T2A         = 0;
EXPANSION_RENAISSANCE = 1;
EXPANSION_THIRDDAWN   = 2;
EXPANSION_LBR         = 3;
EXPANSION_AOS         = 4;
EXPANSION_SE          = 5;
EXPANSION_ML          = 6;
EXPANSION_SA          = 7;
EXPANSION_HS          = 8;

[DEFNAME theme_packs]
THEME_GOTHIC = 01;
THEME_RUSTIC = 02;

[EOF]
